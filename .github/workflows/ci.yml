name: CI
env:
  DEBUG: napi:*
  APP_NAME: sombradb
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: cd packages/nodejs && npm ci
      - name: Cargo fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy --all-targets --all-features
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: windows-latest
            build: npm run build -- --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build -- --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: cd packages/nodejs && npm ci
      - name: Build
        run: cd packages/nodejs && ${{ matrix.settings.build }}
        shell: bash
      - name: List build artifacts
        run: ls -la packages/nodejs/*.node packages/nodejs/*.wasm packages/nodejs/index.js packages/nodejs/index.d.ts 2>&1 || true
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            packages/nodejs/*.node
            packages/nodejs/*.wasm
            packages/nodejs/index.js
            packages/nodejs/index.d.ts
          if-no-files-found: warn
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
          - host: macos-13
            target: x86_64-apple-darwin
            architecture: x64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: cd packages/nodejs && npm ci
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: packages/nodejs
      - name: List packages
        run: |
          echo "=== Root directory ==="
          ls -la packages/nodejs
          echo "=== .node files ==="
          ls -la packages/nodejs/*.node 2>&1 || echo "No .node files found"
          echo "=== index.js ==="
          ls -la packages/nodejs/index.js 2>&1 || echo "No index.js found"
        shell: bash
      - name: Test bindings
        run: cd packages/nodejs && npm test
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: cd packages/nodejs && npm ci
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: packages/nodejs
      - name: List packages
        run: |
          echo "=== Root directory ==="
          ls -la packages/nodejs
          echo "=== .node files ==="
          ls -la packages/nodejs/*.node 2>&1 || echo "No .node files found"
          echo "=== index.js ==="
          ls -la packages/nodejs/index.js 2>&1 || echo "No index.js found"
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: '-v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }}/packages/nodejs --platform ${{ steps.docker.outputs.PLATFORM }}'
          run: npm test
  publish:
    name: Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - build
      - lint
      - test-macOS-windows-binding
      - test-linux-binding
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
      - name: Install dependencies
        run: cd packages/nodejs && npm ci
      - name: create npm dirs
        run: cd packages/nodejs && npx napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts ==="
          ls -R artifacts/
        shell: bash
      - name: Move artifacts
        run: cd packages/nodejs && npm run artifacts
      - name: List packages
        run: ls -R ./packages/nodejs/npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if [[ $GITHUB_REF == refs/tags/v* ]];
          then
            cd packages/nodejs
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            
            if npm publish --access public; then
              echo "✅ Published to npm successfully"
            else
              EXIT_CODE=$?
              echo "❌ Publish failed with exit code $EXIT_CODE"
              echo ""
              echo "If you see '403 Package name triggered spam detection':"
              echo "1. This is expected for new platform-specific packages"
              echo "2. Contact npm support: https://npmjs.com/support"
              echo "3. Reference the NPM_SPAM_DETECTION.md file for details"
              echo "4. npm support typically responds within 24-48 hours"
              echo ""
              echo "The --skip-gh-release flag prevents duplicate GitHub releases."
              echo "Platform packages will publish automatically after npm approval."
              exit $EXIT_CODE
            fi
          else
            echo "Not a tag release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
