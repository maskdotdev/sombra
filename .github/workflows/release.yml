name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - run: npm ci
      - name: Build native module
        run: npm run build
      - run: npm run test:all

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            target: i686-pc-windows-msvc
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
      - run: npm ci
      - name: Build native module
        run: npm run build -- --target ${{ matrix.settings.target }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: "*.node"
          if-no-files-found: error

  python-wheels:
    name: Python Wheels
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12', '3.13', '3.14']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install maturin
        run: python -m pip install --upgrade pip maturin
      - name: Build Python wheel
        run: python -m maturin build --release -F python
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel-${{ matrix.os }}-py${{ matrix.python-version }}
          path: target/wheels/*.whl
          if-no-files-found: error

  publish-crates:
    name: Publish to crates.io
    needs:
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-npm:
    name: Publish to npm
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - run: npm ci
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: bindings-*
      - name: Organize artifacts for napi prepublish
        run: |
          # napi expects files in npm/{platform-name}/sombradb.{platform-name}.node
          mkdir -p npm
          
          # Map Rust target triples to napi platform names
          if [ -f artifacts/bindings-x86_64-pc-windows-msvc/sombradb.win32-x64-msvc.node ]; then
            mkdir -p npm/win32-x64-msvc
            cp artifacts/bindings-x86_64-pc-windows-msvc/*.node npm/win32-x64-msvc/
          fi
          
          if [ -f artifacts/bindings-i686-pc-windows-msvc/sombradb.win32-ia32-msvc.node ]; then
            mkdir -p npm/win32-ia32-msvc
            cp artifacts/bindings-i686-pc-windows-msvc/*.node npm/win32-ia32-msvc/
          fi
          
          if [ -f artifacts/bindings-x86_64-apple-darwin/sombradb.darwin-x64.node ]; then
            mkdir -p npm/darwin-x64
            cp artifacts/bindings-x86_64-apple-darwin/*.node npm/darwin-x64/
          fi
          
          if [ -f artifacts/bindings-aarch64-apple-darwin/sombradb.darwin-arm64.node ]; then
            mkdir -p npm/darwin-arm64
            cp artifacts/bindings-aarch64-apple-darwin/*.node npm/darwin-arm64/
          fi
          
          if [ -f artifacts/bindings-x86_64-unknown-linux-gnu/sombradb.linux-x64-gnu.node ]; then
            mkdir -p npm/linux-x64-gnu
            cp artifacts/bindings-x86_64-unknown-linux-gnu/*.node npm/linux-x64-gnu/
          fi
          
          if [ -f artifacts/bindings-x86_64-unknown-linux-musl/sombradb.linux-x64-musl.node ]; then
            mkdir -p npm/linux-x64-musl
            cp artifacts/bindings-x86_64-unknown-linux-musl/*.node npm/linux-x64-musl/
          fi
          
          if [ -f artifacts/bindings-aarch64-unknown-linux-gnu/sombradb.linux-arm64-gnu.node ]; then
            mkdir -p npm/linux-arm64-gnu
            cp artifacts/bindings-aarch64-unknown-linux-gnu/*.node npm/linux-arm64-gnu/
          fi
          
          if [ -f artifacts/bindings-armv7-unknown-linux-gnueabihf/sombradb.linux-arm-gnueabihf.node ]; then
            mkdir -p npm/linux-arm-gnueabihf
            cp artifacts/bindings-armv7-unknown-linux-gnueabihf/*.node npm/linux-arm-gnueabihf/
          fi
          
          # List what we have
          find npm -name "*.node" -ls
      - name: Publish platform packages and main package
        run: npm run prepublishOnly
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: "npm/**/*.node"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: python-wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.14'
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: python-wheel-*
      - name: Move Python wheels to root
        run: |
          find artifacts -name "*.whl" -exec cp {} . \;
      - name: List Python wheels
        run: ls -la *.whl
      - name: Install twine
        run: python -m pip install --upgrade pip twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload --skip-existing *.whl
