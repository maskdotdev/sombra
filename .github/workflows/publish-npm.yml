name: Publish npm Package

# This is a reusable workflow that can be called in two ways:
# 1. Automatically by release-please.yml when a JS release is created
# 2. Manually via push to tags matching 'sombrajs-v*' (fallback)
#
# The primary trigger is workflow_call from release-please.

on:
  workflow_call:
    inputs:
      tag:
        description: 'Git tag to publish (e.g., sombrajs-v0.4.6)'
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
  push:
    tags:
      - 'sombrajs-v*'

env:
  DEBUG: napi:*
  APP_NAME: '@unyth/sombra'
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug workflow inputs
        run: |
          echo "=== Workflow Debug Info ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Tag input: ${{ inputs.tag }}"
          echo "inputs.tag != '': ${{ inputs.tag != '' }}"
          echo "Event name == 'workflow_call': ${{ github.event_name == 'workflow_call' }}"
          echo "startsWith(github.ref, 'refs/tags/sombrajs-v'): ${{ startsWith(github.ref, 'refs/tags/sombrajs-v') }}"
          echo "NEW Build condition (inputs.tag): ${{ inputs.tag != '' || startsWith(github.ref, 'refs/tags/sombrajs-v') }}"
          echo "OLD Build condition: ${{ github.event_name == 'workflow_call' || startsWith(github.ref, 'refs/tags/sombrajs-v') }}"
  
  build:
    if: |
      inputs.tag != '' || 
      startsWith(github.ref, 'refs/tags/sombrajs-v')
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
            build: npm run build -- --target x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: npm run build -- --target x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: npm run build -- --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: macos-latest
            target: aarch64-apple-darwin
            build: npm run build -- --target aarch64-apple-darwin
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
      - run: cd packages/nodejs && npm ci
      - run: cd packages/nodejs && ${{ matrix.settings.build }}
      - name: Inspect build output
        shell: bash
        run: |
          cd packages/nodejs
          echo "Listing *.node files for target ${{ matrix.settings.target }}"
          find . -name "*.node" -print
          if [ -d npm ]; then
            echo "npm directory snapshot:"
            find npm -type f -print
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            packages/nodejs/*.node
            packages/nodejs/index.js
            packages/nodejs/index.d.ts

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'
          cache: npm
          cache-dependency-path: packages/nodejs/package-lock.json
      - run: cd packages/nodejs && npm ci
      - run: cd packages/nodejs && npx napi create-npm-dirs
      - uses: actions/download-artifact@v4
        with:
          path: packages/nodejs/artifacts
      - run: cd packages/nodejs && npm run artifacts
      - name: Verify packaged binaries
        shell: bash
        run: |
          cd packages/nodejs
          if [ -d npm ]; then
            echo "Expecting binaries under npm/* directories"
            find npm -type f -name "*.node" -print || true
          else
            echo "npm directory missing"
          fi
          for pkg in npm/*; do
            [ -d "$pkg" ] || continue
            echo "Contents of $pkg:"
            ls -la "$pkg" || true
          done
      - name: Copy index files from artifacts
        run: |
          cd packages/nodejs
          cp artifacts/bindings-x86_64-apple-darwin/index.js . || true
          cp artifacts/bindings-x86_64-apple-darwin/index.d.ts . || true
          ls -la index.js index.d.ts
      - name: Publish to npm
        run: |
          cd packages/nodejs
          npm install -g npm@latest
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
