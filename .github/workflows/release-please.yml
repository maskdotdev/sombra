name: Release Please

# This workflow orchestrates the entire release process for all three packages
# (Rust, npm, Python) in the monorepo. When a release PR is merged:
#
# 1. Release Please creates tags and GitHub releases
# 2. This workflow invokes the appropriate publish workflow(s) as reusable workflows
# 3. Publish workflows build and deploy to crates.io/npm/PyPI in parallel
#
# Note: Tags created by GITHUB_TOKEN do not trigger push events, which is why
# we use workflow_call instead of push.tags triggers for publishing.

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      rust_release: ${{ steps.release.outputs['packages/core--release_created'] }}
      js_release: ${{ steps.release.outputs['packages/nodejs--release_created'] }}
      py_release: ${{ steps.release.outputs['packages/python--release_created'] }}
      rust_tag: ${{ steps.release.outputs['packages/core--tag_name'] }}
      js_tag: ${{ steps.release.outputs['packages/nodejs--tag_name'] }}
      py_tag: ${{ steps.release.outputs['packages/python--tag_name'] }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
      
      - name: Debug release outputs
        run: |
          echo "releases_created: ${{ steps.release.outputs.releases_created }}"
          echo "js_release: ${{ steps.release.outputs['packages/nodejs--release_created'] }}"
          echo "js_tag: ${{ steps.release.outputs['packages/nodejs--tag_name'] }}"
          echo "rust_release: ${{ steps.release.outputs['packages/core--release_created'] }}"
          echo "rust_tag: ${{ steps.release.outputs['packages/core--tag_name'] }}"
          echo "py_release: ${{ steps.release.outputs['packages/python--release_created'] }}"
          echo "py_tag: ${{ steps.release.outputs['packages/python--tag_name'] }}"
          
          echo "=== All release-please outputs ==="
          echo '${{ toJSON(steps.release.outputs) }}'

  debug-npm-conditions:
    name: Debug npm publish conditions
    needs: release-please
    runs-on: ubuntu-latest
    steps:
      - name: Debug publish conditions
        run: |
          echo "js_release value: '${{ needs.release-please.outputs.js_release }}'"
          echo "js_tag value: '${{ needs.release-please.outputs.js_tag }}'"
          echo "js_release == 'true': ${{ needs.release-please.outputs.js_release == 'true' }}"
          echo "js_tag != '': ${{ needs.release-please.outputs.js_tag != '' }}"
          echo "Overall condition: ${{ needs.release-please.outputs.js_release == 'true' || needs.release-please.outputs.js_tag != '' }}"

  publish-npm:
    name: Publish npm Package
    needs: release-please
    if: ${{ needs.release-please.outputs.js_tag != '' && needs.release-please.outputs.js_tag != null }}
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/publish-npm.yml
    with:
      tag: ${{ needs.release-please.outputs.js_tag }}
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-rust:
    name: Publish Rust Crate
    needs: release-please
    if: ${{ needs.release-please.outputs.rust_release == 'true' || needs.release-please.outputs.rust_tag != '' }}
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/publish-rust.yml
    with:
      tag: ${{ needs.release-please.outputs.rust_tag }}
    secrets:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-python:
    name: Publish Python Package
    needs: release-please
    if: ${{ needs.release-please.outputs.py_release == 'true' || needs.release-please.outputs.py_tag != '' }}
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/publish-python.yml
    with:
      tag: ${{ needs.release-please.outputs.py_tag }}
    secrets:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
