from typing import Any, Dict, Generic, List, Literal, Optional, TypeVar, Union, overload
from typing_extensions import TypedDict

from .sombra import (
    SombraDB as NativeSombraDB,
    SombraTransaction as NativeSombraTransaction,
    SombraNode,
    SombraEdge,
    BfsResult,
    QueryBuilder as NativeQueryBuilder,
)

PropertyValue = Union[bool, int, float, str, bytes]

SchemaT = TypeVar('SchemaT', bound='GraphSchema')
NodeSchemaT = TypeVar('NodeSchemaT', bound=Dict[str, Dict[str, PropertyValue]])
EdgeSchemaT = TypeVar('EdgeSchemaT', bound=Dict[str, Any])
LabelT = TypeVar('LabelT', bound=str)
Label1T = TypeVar('Label1T', bound=str)
Label2T = TypeVar('Label2T', bound=str)
Label3T = TypeVar('Label3T', bound=str)

class GraphSchema(TypedDict):
    nodes: Dict[str, Dict[str, PropertyValue]]
    edges: Dict[str, Any]

class TypedQueryBuilder(Generic[SchemaT]):
    def __init__(self, db: 'SombraDB[SchemaT]', builder: NativeQueryBuilder) -> None: ...
    def start_from(self, node_ids: List[int]) -> 'TypedQueryBuilder[SchemaT]': ...
    def start_from_label(self, label: str) -> 'TypedQueryBuilder[SchemaT]': ...
    def start_from_property(
        self,
        label: str,
        key: str,
        value: PropertyValue
    ) -> 'TypedQueryBuilder[SchemaT]': ...
    def traverse(
        self,
        edge_types: List[str],
        direction: str,
        depth: int
    ) -> 'TypedQueryBuilder[SchemaT]': ...
    def limit(self, n: int) -> 'TypedQueryBuilder[SchemaT]': ...
    def execute(self) -> Any: ...

class SombraTransaction(Generic[SchemaT]):
    def __init__(self, tx: NativeSombraTransaction) -> None: ...
    def id(self) -> int: ...
    
    @overload
    def add_node(self, labels: str, properties: Dict[str, PropertyValue]) -> int: ...
    @overload
    def add_node(self, labels: List[str], properties: Dict[str, PropertyValue]) -> int: ...
    
    def add_node(
        self,
        labels: Union[str, List[str]],
        properties: Dict[str, PropertyValue]
    ) -> int: ...
    
    def add_edge(
        self,
        source_node_id: int,
        target_node_id: int,
        edge_type: str,
        properties: Optional[Dict[str, PropertyValue]] = None
    ) -> int: ...
    def get_node(self, node_id: int) -> SombraNode: ...
    def get_edge(self, edge_id: int) -> SombraEdge: ...
    def get_neighbors(self, node_id: int) -> List[int]: ...
    def get_outgoing_edges(self, node_id: int) -> List[int]: ...
    def get_incoming_edges(self, node_id: int) -> List[int]: ...
    def delete_node(self, node_id: int) -> None: ...
    def delete_edge(self, edge_id: int) -> None: ...
    def set_node_property(
        self,
        node_id: int,
        key: str,
        value: PropertyValue
    ) -> None: ...
    def remove_node_property(self, node_id: int, key: str) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def get_incoming_neighbors(self, node_id: int) -> List[int]: ...
    def get_neighbors_two_hops(self, node_id: int) -> List[int]: ...
    def get_neighbors_three_hops(self, node_id: int) -> List[int]: ...
    def bfs_traversal(self, start_node_id: int, max_depth: int) -> List[BfsResult]: ...
    def get_nodes_by_label(self, label: str) -> List[int]: ...
    def get_nodes_in_range(self, start: int, end: int) -> List[int]: ...
    def get_nodes_from(self, start: int) -> List[int]: ...
    def get_nodes_to(self, end: int) -> List[int]: ...
    def get_first_node(self) -> Optional[int]: ...
    def get_last_node(self) -> Optional[int]: ...
    def get_first_n_nodes(self, n: int) -> List[int]: ...
    def get_last_n_nodes(self, n: int) -> List[int]: ...
    def get_all_node_ids_ordered(self) -> List[int]: ...
    def count_outgoing_edges(self, node_id: int) -> int: ...
    def count_incoming_edges(self, node_id: int) -> int: ...

class SombraDB(Generic[SchemaT]):
    def __init__(self, path: str) -> None: ...
    def begin_transaction(self) -> SombraTransaction[SchemaT]: ...
    
    @overload
    def add_node(self, labels: str, properties: Dict[str, PropertyValue]) -> int: ...
    @overload
    def add_node(self, labels: List[str], properties: Dict[str, PropertyValue]) -> int: ...
    
    def add_node(
        self,
        labels: Union[str, List[str]],
        properties: Dict[str, PropertyValue]
    ) -> int: ...
    
    def add_edge(
        self,
        source_node_id: int,
        target_node_id: int,
        edge_type: str,
        properties: Optional[Dict[str, PropertyValue]] = None
    ) -> int: ...
    def get_node(self, node_id: int) -> SombraNode: ...
    def get_edge(self, edge_id: int) -> SombraEdge: ...
    def get_neighbors(self, node_id: int) -> List[int]: ...
    def get_outgoing_edges(self, node_id: int) -> List[int]: ...
    def get_incoming_edges(self, node_id: int) -> List[int]: ...
    def delete_node(self, node_id: int) -> None: ...
    def delete_edge(self, edge_id: int) -> None: ...
    def set_node_property(
        self,
        node_id: int,
        key: str,
        value: PropertyValue
    ) -> None: ...
    def remove_node_property(self, node_id: int, key: str) -> None: ...
    def flush(self) -> None: ...
    def checkpoint(self) -> None: ...
    def get_incoming_neighbors(self, node_id: int) -> List[int]: ...
    def get_neighbors_two_hops(self, node_id: int) -> List[int]: ...
    def get_neighbors_three_hops(self, node_id: int) -> List[int]: ...
    def bfs_traversal(self, start_node_id: int, max_depth: int) -> List[BfsResult]: ...
    def get_nodes_by_label(self, label: str) -> List[int]: ...
    def get_nodes_in_range(self, start: int, end: int) -> List[int]: ...
    def get_nodes_from(self, start: int) -> List[int]: ...
    def get_nodes_to(self, end: int) -> List[int]: ...
    def get_first_node(self) -> Optional[int]: ...
    def get_last_node(self) -> Optional[int]: ...
    def get_first_n_nodes(self, n: int) -> List[int]: ...
    def get_last_n_nodes(self, n: int) -> List[int]: ...
    def get_all_node_ids_ordered(self) -> List[int]: ...
    def count_outgoing_edges(self, node_id: int) -> int: ...
    def count_incoming_edges(self, node_id: int) -> int: ...
    def query(self) -> TypedQueryBuilder[SchemaT]: ...

__all__: List[str]
