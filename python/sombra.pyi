from typing import Dict, List, Optional, Union

class SombraNode:
    id: int
    labels: List[str]
    
    @property
    def properties(self) -> Dict[str, Union[bool, int, float, str, bytes]]: ...

class SombraEdge:
    id: int
    source_node_id: int
    target_node_id: int
    type_name: str
    
    @property
    def properties(self) -> Dict[str, Union[bool, int, float, str, bytes]]: ...

class BfsResult:
    node_id: int
    depth: int

class SombraDB:
    def __init__(self, path: str) -> None: ...
    def begin_transaction(self) -> "SombraTransaction": ...
    def add_node(
        self, 
        labels: List[str], 
        properties: Optional[Dict[str, Union[bool, int, float, str, bytes]]] = None
    ) -> int: ...
    def add_edge(
        self,
        source_node_id: int,
        target_node_id: int,
        label: str,
        properties: Optional[Dict[str, Union[bool, int, float, str, bytes]]] = None
    ) -> int: ...
    def get_edge(self, edge_id: int) -> SombraEdge: ...
    def get_outgoing_edges(self, node_id: int) -> List[int]: ...
    def get_incoming_edges(self, node_id: int) -> List[int]: ...
    def get_node(self, node_id: int) -> SombraNode: ...
    def get_neighbors(self, node_id: int) -> List[int]: ...
    def delete_node(self, node_id: int) -> None: ...
    def delete_edge(self, edge_id: int) -> None: ...
    def flush(self) -> None: ...
    def checkpoint(self) -> None: ...
    def get_incoming_neighbors(self, node_id: int) -> List[int]: ...
    def get_neighbors_two_hops(self, node_id: int) -> List[int]: ...
    def get_neighbors_three_hops(self, node_id: int) -> List[int]: ...
    def bfs_traversal(self, start_node_id: int, max_depth: int) -> List[BfsResult]: ...
    def get_nodes_by_label(self, label: str) -> List[int]: ...
    def get_nodes_in_range(self, start: int, end: int) -> List[int]: ...
    def get_nodes_from(self, start: int) -> List[int]: ...
    def get_nodes_to(self, end: int) -> List[int]: ...
    def get_first_node(self) -> Optional[int]: ...
    def get_last_node(self) -> Optional[int]: ...
    def get_first_n_nodes(self, n: int) -> List[int]: ...
    def get_last_n_nodes(self, n: int) -> List[int]: ...
    def get_all_node_ids_ordered(self) -> List[int]: ...
    def count_outgoing_edges(self, node_id: int) -> int: ...
    def count_incoming_edges(self, node_id: int) -> int: ...
    def set_node_property(
        self,
        node_id: int,
        key: str,
        value: Union[bool, int, float, str, bytes]
    ) -> None: ...
    def remove_node_property(self, node_id: int, key: str) -> None: ...

class SombraTransaction:
    def id(self) -> int: ...
    def add_node(
        self, 
        labels: List[str], 
        properties: Optional[Dict[str, Union[bool, int, float, str, bytes]]] = None
    ) -> int: ...
    def add_edge(
        self,
        source_node_id: int,
        target_node_id: int,
        label: str,
        properties: Optional[Dict[str, Union[bool, int, float, str, bytes]]] = None
    ) -> int: ...
    def get_edge(self, edge_id: int) -> SombraEdge: ...
    def get_outgoing_edges(self, node_id: int) -> List[int]: ...
    def get_incoming_edges(self, node_id: int) -> List[int]: ...
    def get_node(self, node_id: int) -> SombraNode: ...
    def get_neighbors(self, node_id: int) -> List[int]: ...
    def delete_node(self, node_id: int) -> None: ...
    def delete_edge(self, edge_id: int) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def get_incoming_neighbors(self, node_id: int) -> List[int]: ...
    def get_neighbors_two_hops(self, node_id: int) -> List[int]: ...
    def get_neighbors_three_hops(self, node_id: int) -> List[int]: ...
    def bfs_traversal(self, start_node_id: int, max_depth: int) -> List[BfsResult]: ...
    def get_nodes_by_label(self, label: str) -> List[int]: ...
    def get_nodes_in_range(self, start: int, end: int) -> List[int]: ...
    def get_nodes_from(self, start: int) -> List[int]: ...
    def get_nodes_to(self, end: int) -> List[int]: ...
    def get_first_node(self) -> Optional[int]: ...
    def get_last_node(self) -> Optional[int]: ...
    def get_first_n_nodes(self, n: int) -> List[int]: ...
    def get_last_n_nodes(self, n: int) -> List[int]: ...
    def get_all_node_ids_ordered(self) -> List[int]: ...
    def count_outgoing_edges(self, node_id: int) -> int: ...
    def count_incoming_edges(self, node_id: int) -> int: ...
    def set_node_property(
        self,
        node_id: int,
        key: str,
        value: Union[bool, int, float, str, bytes]
    ) -> None: ...
    def remove_node_property(self, node_id: int, key: str) -> None: ...

__version__: str